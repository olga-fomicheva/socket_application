import socket
from views import *
# How URLS part is done in Flask and Django:
# Flask uses dictionary. URL is generated by decorator (look's like this: @app.route('/'), where '/' is a key and function is a value
# Django uses list, which look's like ths: url or path('/index', index())
URLS = {
    '/': index,
    '/blog': blog
}
# parse_request returns a tuple that is unpacked in the generate_response function
def parse_request(request):
    print(request)
    #creating a buffer variable "requested", which receives the input (string), which can be split into spaces.
    parsed = request.split(' ')
    method = parsed[0]
    url = parsed[1]


    return (method, url)

def generate_headers(method, url):
    # here I cover three scenarios - incorrect method, incorrect url or correct requested
    if method not in ['GET']:
        return ('HTTP/1.1 405 Method not allowed\n\n', 405)
    if url not in URLS:
        return ('HTTP/1.1 404 Not found\n\n', 404)
    return ('HTTP/1.1 200 OK\n\n', 200 )

def generate_content(code, url):
    if code == 404:
        return '<h1>404</h1><p>Not found</p>'
    if code == 405:
        return '<h1>405</h1><p>Method not allowed</p>'
    return URLS[url]()


def generate_response(request):
    # parsing the request, getting the method and url of the request, so I define method and url:
    method, url = parse_request(request)
    # the response will consist of two parts - the header and the body.
    headers, code = generate_headers(method, url)
    body = generate_content(code, url)
    return (headers + body).encode()

def run():
    # creating the subject receiving the request. Specifies which protocols it will use
    # AF_INET - IP protocol, has versions 4 and 6:
    #       INET - version 4 (the most popular, IP has 4 separated by dots parts (1 byte each).
    #       INET6 - version 6
    # SOCK_STREAM - tcp

    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    #Impact level: SOL_SOCKET - our socket, REUSEADDR - reuse address, 1 = true. Now socket will be available immediately without timeout after closing
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_socket.bind(('localhost', 5000))
    server_socket.listen()

    while True:
        client_socket, addr = server_socket.accept()
        #Clarify received request volume (1024 bytes)
        request = client_socket.recv(1024)
        if not request:
            continue
        print(request)
        print()
        print(addr)
        # The socket of the requestor receives the response:
        response = generate_response(request.decode('utf-8'))
        client_socket.sendall(response)
        #in order to complete the connection must be closed
        client_socket.close()


if __name__ == '__main__':
        run()
